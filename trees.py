import numpy as np
import matplotlib.pyplot as plt

def tree(base,graph,cycle):
	#find parents
	parents = graph[base][0]
	for each in cycle:
		if each in parents:
			parents.remove(each)


	#add parents to visits
	for a in parents:
		visits.append(a)

	#add co-ordinates to graph array
	n = len(parents)
	count = 0
	amp = graph[base][2][0]
	min_ang = graph[base][2][1]
	max_ang = graph[base][2][2] 

	for b in parents:
		graph[b][2][0] = amp + 1
		graph[b][2][1] = min_ang + count*(max_ang-min_ang)/n
		graph[b][2][2] = min_ang + (count+1)*(max_ang-min_ang)/n 
		count = count + 1

	#draw
	for c in parents:
			mid = (graph[c][2][1] + graph[c][2][2])/2
			xco = graph[c][2][0]*np.cos(np.radians(mid))
			yco = graph[c][2][0]*np.sin(np.radians(mid))
			graph[c][2][3] = xco 
			graph[c][2][4] = yco
			ax.plot(xco,yco,'o',markersize=4)
			ax.arrow(xco, yco, graph[base][2][3]-xco, graph[base][2][4]-yco, head_width=0.01, head_length=0.01, fc='k', ec='k')


	for z in parents:
		tree(z,graph,parents)

#graph[n] gives the parent nodes, child nodes and co-ordinates for the nth node.
#graph[n][2][0] gives polar amplitude, [1] is min angle, [2] is max angle, [3] is x, [4] is y
graph = [[[],[],[0,0,0,0,0]] for x in range(1024)]

targets = [0.0, 128.0, 256.0, 0.0, 0.0, 128.0, 0.0, 0.0, 64.0, 0.0, 320.0, 0.0, 64.0, 0.0, 64.0, 0.0, 32.0, 672.0, 32.0, 544.0, 32.0, 672.0, 32.0, 544.0, 64.0, 0.0, 64.0, 0.0, 64.0, 0.0, 64.0, 0.0, 1.0, 129.0, 257.0, 1.0, 1.0, 129.0, 1.0, 1.0, 65.0, 1.0, 321.0, 1.0, 65.0, 1.0, 65.0, 1.0, 33.0, 673.0, 33.0, 545.0, 33.0, 673.0, 33.0, 545.0, 65.0, 1.0, 65.0, 1.0, 65.0, 1.0, 65.0, 1.0, 2.0, 130.0, 258.0, 2.0, 2.0, 130.0, 2.0, 2.0, 66.0, 2.0, 322.0, 2.0, 66.0, 2.0, 66.0, 2.0, 34.0, 674.0, 34.0, 546.0, 34.0, 674.0, 34.0, 546.0, 66.0, 2.0, 66.0, 2.0, 66.0, 2.0, 66.0, 2.0, 3.0, 131.0, 259.0, 3.0, 3.0, 131.0, 3.0, 3.0, 67.0, 3.0, 323.0, 3.0, 67.0, 3.0, 67.0, 3.0, 35.0, 675.0, 35.0, 547.0, 35.0, 675.0, 35.0, 547.0, 67.0, 3.0, 67.0, 3.0, 67.0, 3.0, 67.0, 3.0, 4.0, 132.0, 260.0, 4.0, 4.0, 132.0, 4.0, 4.0, 68.0, 4.0, 324.0, 4.0, 68.0, 4.0, 68.0, 4.0, 36.0, 676.0, 36.0, 548.0, 36.0, 676.0, 36.0, 548.0, 68.0, 4.0, 68.0, 4.0, 68.0, 4.0, 68.0, 4.0, 5.0, 133.0, 261.0, 5.0, 5.0, 133.0, 5.0, 5.0, 69.0, 5.0, 325.0, 5.0, 69.0, 5.0, 69.0, 5.0, 37.0, 677.0, 37.0, 549.0, 37.0, 677.0, 37.0, 549.0, 69.0, 5.0, 69.0, 5.0, 69.0, 5.0, 69.0, 5.0, 6.0, 134.0, 262.0, 6.0, 6.0, 134.0, 6.0, 6.0, 70.0, 6.0, 326.0, 6.0, 70.0, 6.0, 70.0, 6.0, 38.0, 678.0, 38.0, 550.0, 38.0, 678.0, 38.0, 550.0, 70.0, 6.0, 70.0, 6.0, 70.0, 6.0, 70.0, 6.0, 7.0, 135.0, 263.0, 7.0, 7.0, 135.0, 7.0, 7.0, 71.0, 7.0, 327.0, 7.0, 71.0, 7.0, 71.0, 7.0, 39.0, 679.0, 39.0, 551.0, 39.0, 679.0, 39.0, 551.0, 71.0, 7.0, 71.0, 7.0, 71.0, 7.0, 71.0, 7.0, 8.0, 136.0, 264.0, 8.0, 8.0, 136.0, 8.0, 8.0, 72.0, 8.0, 328.0, 8.0, 72.0, 8.0, 72.0, 8.0, 40.0, 680.0, 40.0, 552.0, 40.0, 680.0, 40.0, 552.0, 72.0, 8.0, 72.0, 8.0, 72.0, 8.0, 72.0, 8.0, 9.0, 137.0, 265.0, 9.0, 9.0, 137.0, 9.0, 9.0, 73.0, 9.0, 329.0, 9.0, 73.0, 9.0, 73.0, 9.0, 41.0, 681.0, 41.0, 553.0, 41.0, 681.0, 41.0, 553.0, 73.0, 9.0, 73.0, 9.0, 73.0, 9.0, 73.0, 9.0, 10.0, 138.0, 266.0, 10.0, 10.0, 138.0, 10.0, 10.0, 74.0, 10.0, 330.0, 10.0, 74.0, 10.0, 74.0, 10.0, 42.0, 682.0, 42.0, 554.0, 42.0, 682.0, 42.0, 554.0, 74.0, 10.0, 74.0, 10.0, 74.0, 10.0, 74.0, 10.0, 11.0, 139.0, 267.0, 11.0, 11.0, 139.0, 11.0, 11.0, 75.0, 11.0, 331.0, 11.0, 75.0, 11.0, 75.0, 11.0, 43.0, 683.0, 43.0, 555.0, 43.0, 683.0, 43.0, 555.0, 75.0, 11.0, 75.0, 11.0, 75.0, 11.0, 75.0, 11.0, 12.0, 140.0, 268.0, 12.0, 12.0, 140.0, 12.0, 12.0, 76.0, 12.0, 332.0, 12.0, 76.0, 12.0, 76.0, 12.0, 44.0, 684.0, 44.0, 556.0, 44.0, 684.0, 44.0, 556.0, 76.0, 12.0, 76.0, 12.0, 76.0, 12.0, 76.0, 12.0, 13.0, 141.0, 269.0, 13.0, 13.0, 141.0, 13.0, 13.0, 77.0, 13.0, 333.0, 13.0, 77.0, 13.0, 77.0, 13.0, 45.0, 685.0, 45.0, 557.0, 45.0, 685.0, 45.0, 557.0, 77.0, 13.0, 77.0, 13.0, 77.0, 13.0, 77.0, 13.0, 14.0, 142.0, 270.0, 14.0, 14.0, 142.0, 14.0, 14.0, 78.0, 14.0, 334.0, 14.0, 78.0, 14.0, 78.0, 14.0, 46.0, 686.0, 46.0, 558.0, 46.0, 686.0, 46.0, 558.0, 78.0, 14.0, 78.0, 14.0, 78.0, 14.0, 78.0, 14.0, 15.0, 143.0, 271.0, 15.0, 15.0, 143.0, 15.0, 15.0, 79.0, 15.0, 335.0, 15.0, 79.0, 15.0, 79.0, 15.0, 47.0, 687.0, 47.0, 559.0, 47.0, 687.0, 47.0, 559.0, 79.0, 15.0, 79.0, 15.0, 79.0, 15.0, 79.0, 15.0, 16.0, 144.0, 272.0, 16.0, 16.0, 144.0, 16.0, 16.0, 80.0, 16.0, 336.0, 16.0, 80.0, 16.0, 80.0, 16.0, 48.0, 688.0, 48.0, 560.0, 48.0, 688.0, 48.0, 560.0, 80.0, 16.0, 80.0, 16.0, 80.0, 16.0, 80.0, 16.0, 17.0, 145.0, 273.0, 17.0, 17.0, 145.0, 17.0, 17.0, 81.0, 17.0, 337.0, 17.0, 81.0, 17.0, 81.0, 17.0, 49.0, 689.0, 49.0, 561.0, 49.0, 689.0, 49.0, 561.0, 81.0, 17.0, 81.0, 17.0, 81.0, 17.0, 81.0, 17.0, 18.0, 146.0, 274.0, 18.0, 18.0, 146.0, 18.0, 18.0, 82.0, 18.0, 338.0, 18.0, 82.0, 18.0, 82.0, 18.0, 50.0, 690.0, 50.0, 562.0, 50.0, 690.0, 50.0, 562.0, 82.0, 18.0, 82.0, 18.0, 82.0, 18.0, 82.0, 18.0, 19.0, 147.0, 275.0, 19.0, 19.0, 147.0, 19.0, 19.0, 83.0, 19.0, 339.0, 19.0, 83.0, 19.0, 83.0, 19.0, 51.0, 691.0, 51.0, 563.0, 51.0, 691.0, 51.0, 563.0, 83.0, 19.0, 83.0, 19.0, 83.0, 19.0, 83.0, 19.0, 20.0, 148.0, 276.0, 20.0, 20.0, 148.0, 20.0, 20.0, 84.0, 20.0, 340.0, 20.0, 84.0, 20.0, 84.0, 20.0, 52.0, 692.0, 52.0, 564.0, 52.0, 692.0, 52.0, 564.0, 84.0, 20.0, 84.0, 20.0, 84.0, 20.0, 84.0, 20.0, 21.0, 149.0, 277.0, 21.0, 21.0, 149.0, 21.0, 21.0, 85.0, 21.0, 341.0, 21.0, 85.0, 21.0, 85.0, 21.0, 53.0, 693.0, 53.0, 565.0, 53.0, 693.0, 53.0, 565.0, 85.0, 21.0, 85.0, 21.0, 85.0, 21.0, 85.0, 21.0, 22.0, 150.0, 278.0, 22.0, 22.0, 150.0, 22.0, 22.0, 86.0, 22.0, 342.0, 22.0, 86.0, 22.0, 86.0, 22.0, 54.0, 694.0, 54.0, 566.0, 54.0, 694.0, 54.0, 566.0, 86.0, 22.0, 86.0, 22.0, 86.0, 22.0, 86.0, 22.0, 23.0, 151.0, 279.0, 23.0, 23.0, 151.0, 23.0, 23.0, 87.0, 23.0, 343.0, 23.0, 87.0, 23.0, 87.0, 23.0, 55.0, 695.0, 55.0, 567.0, 55.0, 695.0, 55.0, 567.0, 87.0, 23.0, 87.0, 23.0, 87.0, 23.0, 87.0, 23.0, 24.0, 152.0, 280.0, 24.0, 24.0, 152.0, 24.0, 24.0, 88.0, 24.0, 344.0, 24.0, 88.0, 24.0, 88.0, 24.0, 56.0, 696.0, 56.0, 568.0, 56.0, 696.0, 56.0, 568.0, 88.0, 24.0, 88.0, 24.0, 88.0, 24.0, 88.0, 24.0, 25.0, 153.0, 281.0, 25.0, 25.0, 153.0, 25.0, 25.0, 89.0, 25.0, 345.0, 25.0, 89.0, 25.0, 89.0, 25.0, 57.0, 697.0, 57.0, 569.0, 57.0, 697.0, 57.0, 569.0, 89.0, 25.0, 89.0, 25.0, 89.0, 25.0, 89.0, 25.0, 26.0, 154.0, 282.0, 26.0, 26.0, 154.0, 26.0, 26.0, 90.0, 26.0, 346.0, 26.0, 90.0, 26.0, 90.0, 26.0, 58.0, 698.0, 58.0, 570.0, 58.0, 698.0, 58.0, 570.0, 90.0, 26.0, 90.0, 26.0, 90.0, 26.0, 90.0, 26.0, 27.0, 155.0, 283.0, 27.0, 27.0, 155.0, 27.0, 27.0, 91.0, 27.0, 347.0, 27.0, 91.0, 27.0, 91.0, 27.0, 59.0, 699.0, 59.0, 571.0, 59.0, 699.0, 59.0, 571.0, 91.0, 27.0, 91.0, 27.0, 91.0, 27.0, 91.0, 27.0, 28.0, 156.0, 284.0, 28.0, 28.0, 156.0, 28.0, 28.0, 92.0, 28.0, 348.0, 28.0, 92.0, 28.0, 92.0, 28.0, 60.0, 700.0, 60.0, 572.0, 60.0, 700.0, 60.0, 572.0, 92.0, 28.0, 92.0, 28.0, 92.0, 28.0, 92.0, 28.0, 29.0, 157.0, 285.0, 29.0, 29.0, 157.0, 29.0, 29.0, 93.0, 29.0, 349.0, 29.0, 93.0, 29.0, 93.0, 29.0, 61.0, 701.0, 61.0, 573.0, 61.0, 701.0, 61.0, 573.0, 93.0, 29.0, 93.0, 29.0, 93.0, 29.0, 93.0, 29.0, 30.0, 158.0, 286.0, 30.0, 30.0, 158.0, 30.0, 30.0, 94.0, 30.0, 350.0, 30.0, 94.0, 30.0, 94.0, 30.0, 62.0, 702.0, 62.0, 574.0, 62.0, 702.0, 62.0, 574.0, 94.0, 30.0, 94.0, 30.0, 94.0, 30.0, 94.0, 30.0, 31.0, 159.0, 287.0, 31.0, 31.0, 159.0, 31.0, 31.0, 95.0, 31.0, 351.0, 31.0, 95.0, 31.0, 95.0, 31.0, 63.0, 703.0, 63.0, 575.0, 63.0, 703.0, 63.0, 575.0, 95.0, 31.0, 95.0, 31.0, 95.0, 31.0, 95.0, 31.0]


targets = [int(z) for z in targets]

for i in range(1024):
	graph[i][1] = targets[i]			#add child
	graph[targets[i]][0].append(i)		#add parent

visits = []

while len(visits)<1024:

	#find where to start
	for i in range(1024):
		if not i in visits:
			break

	#find base nodes
	while not (i in visits):
		visits.append(i)
		i = graph[i][1]

	plt.figure()

	base = visits[visits.index(i):]

	#find co-ordinates of base nodes

	n = len(base)
	count = 0

	for x in base:
		graph[x][2][0] = 1
		graph[x][2][1] = count*180/n
		graph[x][2][2] = (count+1)*180/n 
		count = count + 1

	#draw
	ax = plt.axes()
	plt.axis([-15,15,-15,15])
	plt.title(base)
	circle = plt.Circle((0,0),1, color='k', fill=False)
	ax.add_artist(circle)
	for x in base:
		mid = (graph[x][2][1] + graph[x][2][2])/2.
		graph[x][2][3] = graph[x][2][0]*np.cos(np.radians(mid))
		graph[x][2][4] = graph[x][2][0]*np.sin(np.radians(mid))
		ax.plot(graph[x][2][3], graph[x][2][4],'o')


	for x in base:
		tree(x,graph,base)

	#do it again for the next set

plt.show()
